{"ast":null,"code":"import _classCallCheck from \"/Users/szef/Documents/praca/simple_api_request_app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/szef/Documents/praca/simple_api_request_app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/szef/Documents/praca/simple_api_request_app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/szef/Documents/praca/simple_api_request_app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/szef/Documents/praca/simple_api_request_app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/szef/Documents/praca/simple_api_request_app/src/Dashboard.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport './dashboard.css';\nimport * as Yup from 'yup';\nimport { actions } from './actions';\nimport { connect } from 'react-redux';\n\nvar DashboardComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DashboardComponent, _React$Component);\n\n  function DashboardComponent() {\n    _classCallCheck(this, DashboardComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DashboardComponent).apply(this, arguments));\n  }\n\n  _createClass(DashboardComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: {\n          name: ''\n        },\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting;\n\n          _this.props.loadUserData(values.name);\n\n          setSubmitting(false);\n        },\n        validationSchema: Yup.object().shape({\n          name: Yup.string().required('Required')\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, function (props) {\n        var values = props.values,\n            touched = props.touched,\n            errors = props.errors,\n            dirty = props.dirty,\n            isSubmitting = props.isSubmitting,\n            handleChange = props.handleChange,\n            handleBlur = props.handleBlur,\n            handleSubmit = props.handleSubmit,\n            handleReset = props.handleReset;\n        return React.createElement(\"form\", {\n          onSubmit: handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: \"name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"GitHub Name\")), React.createElement(\"input\", {\n          id: \"name\",\n          placeholder: \"Enter your username\",\n          type: \"text\",\n          value: values.name,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          className: errors.name && touched.name ? 'error' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }), errors.name && errors.touched && React.createElement(\"div\", {\n          className: \"input-feedback\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, errors.name), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"outline\",\n          onClick: handleReset,\n          disabled: !dirty || isSubmitting,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Reset\"), React.createElement(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"Submit\"));\n      }), React.createElement(\"div\", {\n        className: \"output\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, JSON.stringify(this.props.user, null, 2)));\n    }\n  }]);\n\n  return DashboardComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadUserData: function loadUserData(name) {\n      return dispatch(actions.loadUserData(name));\n    }\n  };\n};\n\nexport var Dashboard = connect(mapStateToProps, mapDispatchToProps)(DashboardComponent);","map":{"version":3,"sources":["/Users/szef/Documents/praca/simple_api_request_app/src/Dashboard.js"],"names":["React","Formik","Yup","actions","connect","DashboardComponent","name","values","setSubmitting","props","loadUserData","object","shape","string","required","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","JSON","stringify","user","Component","mapStateToProps","state","mapDispatchToProps","dispatch","Dashboard"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Formik} from 'formik';\nimport './dashboard.css';\nimport * as Yup from 'yup';\nimport {actions} from './actions';\nimport {connect} from 'react-redux';\n\n\nclass DashboardComponent extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <Formik\n                    initialValues={{name: ''}}\n                    onSubmit={(values, {setSubmitting}) => {\n                        this.props.loadUserData(values.name);\n                        setSubmitting(false);\n                    }}\n                    validationSchema={Yup.object().shape({\n                        name: Yup.string().required('Required')\n                    })}\n                >\n                    {props => {\n                        const {\n                            values,\n                            touched,\n                            errors,\n                            dirty,\n                            isSubmitting,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            handleReset\n                        } = props;\n                        return (\n                            <form onSubmit={handleSubmit}>\n                                <label htmlFor=\"name\"><b>GitHub Name</b></label>\n                                <input\n                                    id=\"name\"\n                                    placeholder=\"Enter your username\"\n                                    type=\"text\"\n                                    value={values.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    className={errors.name && touched.name ? 'error' : ''}\n                                />\n                                {errors.name && errors.touched && <div className=\"input-feedback\">{errors.name}</div>}\n                                <button\n                                    type=\"button\"\n                                    className=\"outline\"\n                                    onClick={handleReset}\n                                    disabled={!dirty || isSubmitting}\n                                >\n                                    Reset\n                                </button>\n                                <button type=\"submit\" disabled={isSubmitting}>\n                                    Submit\n                                </button>\n                            </form>\n                        );\n                    }}\n                </Formik>\n                <div className=\"output\">\n                    {JSON.stringify(this.props.user, null, 2)}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadUserData: name => dispatch(actions.loadUserData(name))\n    };\n};\n\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(DashboardComponent);\n\n"]},"metadata":{},"sourceType":"module"}